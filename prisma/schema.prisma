// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  Job     Job[]
  Food    Food[]
  Recipes Recipes[]
  Order   Order[]
  Save    Save[]
  Apply   Apply[]
  Tokens  Tokens[]

  @@map("user")
}

model Tokens {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  token     String
  createdAt DateTime @default(now())

  @@map("tokens")
}

model Pay {
  id      Int @id @default(autoincrement())
  balance Int @default(0)

  @@map("pay")
}

model Job {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  media     String
  title     String
  location  String
  createdAt DateTime @default(now())
  Apply     Apply[]

  @@map("job")
}

model Food {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  media     String
  title     String
  category  String
  schedule  String
  createdAt DateTime @default(now())
  Order     Order[]
  Save      Save[]

  @@map("food")
}

model Recipes {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  media     String
  title     String
  category  String
  createdAt DateTime @default(now())
  Save      Save[]

  @@map("recipes")
}

model Order {
  id          Int      @id @default(autoincrement())
  User        User     @relation(fields: [userId], references: [id])
  userId      Int
  Food        Food     @relation(fields: [foodId], references: [id])
  foodId      Int
  street      String
  city        String
  state       String
  zipCode     Int
  phoneNumber Int
  createdAt   DateTime @default(now())

  @@map("order")
}

model Apply {
  id          Int      @id @default(autoincrement())
  User        User     @relation(fields: [userId], references: [id])
  userId      Int
  Job         Job      @relation(fields: [jobId], references: [id])
  jobId       Int
  eduction    String
  city        String
  zipCode     Int
  phoneNumber Int
  createdAt   DateTime @default(now())

  @@map("apply")
}

model Save {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Recipes   Recipes  @relation(fields: [recipesId], references: [id])
  recipesId Int
  createdAt DateTime @default(now())

  Food   Food? @relation(fields: [foodId], references: [id])
  foodId Int?


  @@map("save")
}
